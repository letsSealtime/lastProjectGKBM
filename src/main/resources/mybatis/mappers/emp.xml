<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gkbm.emp">

	<!-- 최수완 -->

	<!-- VENDOR 전체 조회 -->
	<select id="selectVendorAll_1"
		resultType="kr.or.GKBM.vendor.VendorDTO">

		SELECT COUNT(*) AS line
		FROM P_VENDOR

	</select>

	<!-- 페이징 전체 조회 -->
	<select id="selectVendor_All_1"
		parameterType="kr.or.GKBM.vendor.VendorDTO"
		resultType="kr.or.GKBM.vendor.VendorDTO">

		SELECT RNUM, c_c, c_n, c_m, c_p, c_a, c_i
		FROM ( SELECT ROWNUM AS
		RNUM,
		c_c, c_n, c_m, c_p, c_a, c_i
		FROM ( SELECT VENDOR_ID AS
		c_c, VENDOR_NAME
		AS c_n, MGR AS c_m,
		VENDOR_PHONE AS c_p, EMAIL AS c_a,
		SKU_ID AS c_i
		FROM P_VENDOR
		ORDER BY c_n))
		WHERE RNUM <![CDATA[ >= ]]>
		${indexStart} AND RNUM <![CDATA[ <= ]]>
		${indexEnd}

	</select>

	<!-- VENDOR 부분 조회 -->
	<select id="selectVendorPart_1"
		parameterType="kr.or.GKBM.vendor.VendorDTO"
		resultType="kr.or.GKBM.vendor.VendorDTO">
		SELECT COUNT(*) AS line
		FROM P_VENDOR
		<where>
			<if test="c_c != null and c_c != ''">
				AND VENDOR_ID = #{c_c}
			</if>
			<if test="c_n != null and c_n != ''">
				AND UPPER(VENDOR_NAME) LIKE '%' || UPPER(#{c_n}) || '%'
			</if>
			<if test="c_m != null and c_m != ''">
				AND UPPER(MGR) LIKE '%' || UPPER(#{c_m}) || '%'
			</if>
			<if test="c_p != null and c_p != ''">
				AND VENDOR_PHONE = #{c_p}
			</if>
			<if test="c_a != null and c_a != ''">
				AND UPPER(EMAIL) LIKE '%' || UPPER(#{c_a}) || '%'
			</if>
			<if test="c_i != null and c_i != ''">
				AND SKU_ID = #{c_i}
			</if>
		</where>

	</select>

	<!-- 페이징 부분 조회 -->
	<select id="selectVendor_Part_1"
		parameterType="kr.or.GKBM.vendor.VendorDTO"
		resultType="kr.or.GKBM.vendor.VendorDTO">
		SELECT RNUM, c_c, c_n, c_m, c_p, c_a, c_i
		FROM (
		SELECT ROWNUM AS RNUM,
		c_c, c_n, c_m, c_p, c_a, c_i
		FROM (
		SELECT
		VENDOR_ID AS c_c,
		VENDOR_NAME
		AS c_n,
		MGR AS c_m,
		VENDOR_PHONE AS c_p,
		EMAIL AS c_a,
		SKU_ID AS c_i
		FROM
		P_VENDOR
		<where>
			<if test="c_c != null and c_c != ''">
				AND VENDOR_ID = #{c_c}
			</if>
			<if test="c_n != null and c_n != ''">
				AND UPPER(VENDOR_NAME) LIKE '%' || UPPER(#{c_n}) || '%'
			</if>
			<if test="c_m != null and c_m != ''">
				AND UPPER(MGR) LIKE '%' || UPPER(#{c_m}) || '%'
			</if>
			<if test="c_p != null and c_p != ''">
				AND VENDOR_PHONE = #{c_p}
			</if>
			<if test="c_a != null and c_a != ''">
				AND UPPER(EMAIL) LIKE '%' || UPPER(#{c_a}) || '%'
			</if>
			<if test="c_i != null and c_i != ''">
				AND SKU_ID = #{c_i}
			</if>
		</where>

		ORDER BY VENDOR_NAME))
		WHERE RNUM <![CDATA[ >= ]]>
		${indexStart}
		AND RNUM <![CDATA[ <= ]]>
		${indexEnd}
	</select>

	<!-- 데이터 기입 -->

	<insert id="insertVendor_1"
		parameterType="kr.or.GKBM.vendor.VendorDTO">

		INSERT INTO P_VENDOR
		VALUES(SEQ.NEXTVAL, #{c_n}, #{c_m},
		#{c_p}, #{c_a}, #{c_i})

	</insert>

	<delete id="deleteVendor_1"
		parameterType="kr.or.GKBM.vendor.VendorDTO">

		DELETE FROM P_VENDOR
		WHERE VENDOR_ID IN
		<foreach item="delete" collection="check" open="(" close=")"
			separator=",">
			#{delete}
		</foreach>

	</delete>

	<update id="updateVendor_1"
		parameterType="kr.or.GKBM.vendor.VendorDTO">

		UPDATE P_VENDOR
		SET VENDOR_NAME = #{c_n},
		MGR = #{c_m},
		VENDOR_PHONE = #{c_p},
		EMAIL = #{c_a},
		SKU_ID = #{c_i}
		WHERE VENDOR_ID =
		#{c_c}

	</update>

	<!-- BILL 전체 조회 -->
	<select id="selectBillAll_1"
		resultType="kr.or.GKBM.bill.BillDTO">

		SELECT COUNT(*) AS line
		FROM P_BILL PB
		LEFT JOIN P_VENDOR PV
		ON PB.VENDOR_ID = PV.VENDOR_ID

	</select>

	<!-- 페이징 전체 조회 -->
	<select id="selectBill_All_1"
		parameterType="kr.or.GKBM.bill.BillDTO"
		resultType="kr.or.GKBM.bill.BillDTO">

		SELECT RNUM, c_c, c_q, c_p, c_a, c_i, c_d, c_n, c_b, c_j
		FROM ( SELECT
		ROWNUM AS
		RNUM,
		c_c, c_q, c_p, c_a, c_i, c_d, c_n, c_b, c_j
		FROM ( SELECT
		PB.BILL_ID AS
		c_c, PB.BILL_COUNT
		AS c_q, PB.PRICE AS c_b,
		PB.STATUS AS
		c_a, PB.VENDOR_ID AS c_i,
		PB.BILL_DATE AS c_d, PV.VENDOR_NAME AS c_n,
		PV.VENDOR_PHONE AS c_p,
		PV.EMAIL AS c_j
		FROM P_BILL PB
		LEFT JOIN P_VENDOR
		PV ON PB.VENDOR_ID = PV.VENDOR_ID
		ORDER BY VENDOR_NAME))
		WHERE RNUM <![CDATA[ >= ]]>
		${indexStart} AND RNUM <![CDATA[ <= ]]>
		${indexEnd}

	</select>

	<!-- BILL 부분 조회 -->
	<select id="selectBillPart_1"
		parameterType="kr.or.GKBM.bill.BillDTO"
		resultType="kr.or.GKBM.bill.BillDTO">
		SELECT COUNT(*) AS line
		FROM P_BILL PB
		LEFT JOIN P_VENDOR PV ON
		PB.VENDOR_ID = PV.VENDOR_ID

		<where>
			<if test="c_d != null and c_d != ''">
				AND BILL_DATE = #{c_d}
			</if>
			<if test="c_c != null and c_c != ''">
				AND BILL_ID = #{c_c}
			</if>
			<if test="c_q != null and c_q != ''">
				AND BILL_COUNT = #{c_q}
			</if>
			<if test="c_b != null and c_b != ''">
				AND PRICE = #{c_b}
			</if>
			<if test="c_a != null and c_a != ''">
				AND STATUS = #{c_a}
			</if>
			<if test="c_i != null and c_i != ''">
				AND VENDOR_ID = #{c_i}
			</if>
			<if test="c_n != null and c_n != ''">
				AND UPPER(MGR) LIKE '%' || UPPER(#{c_n}) || '%'
			</if>
			<if test="c_p != null and c_p != ''">
				AND VENDOR_PHONE = #{c_p}
			</if>
			<if test="c_j != null and c_j != ''">
				AND UPPER(EMAIL) LIKE '%' || UPPER(#{c_j}) || '%'
			</if>
		</where>

	</select>

	<!-- 페이징 부분 조회 -->
	<select id="selectBill_Part_1"
		parameterType="kr.or.GKBM.bill.BillDTO"
		resultType="kr.or.GKBM.bill.BillDTO">
		SELECT RNUM, c_c, c_q, c_p, c_a, c_i, c_d, c_n, c_b, c_j
		FROM ( SELECT
		ROWNUM AS
		RNUM,
		c_c, c_q, c_p, c_a, c_i, c_d, c_n, c_b, c_j
		FROM ( SELECT
		PB.BILL_ID AS
		c_c, PB.BILL_COUNT
		AS c_q, PB.PRICE AS c_b,
		PB.STATUS AS
		c_a, PB.VENDOR_ID AS c_i,
		PB.BILL_DATE AS c_d, PV.VENDOR_NAME AS c_n,
		PV.VENDOR_PHONE AS c_p,
		PV.EMAIL AS c_j
		FROM P_BILL PB
		LEFT JOIN P_VENDOR
		PV ON PB.VENDOR_ID = PV.VENDOR_ID
		<where>
			<if test="c_d != null and c_d != ''">
				AND BILL_DATE = #{c_d}
			</if>
			<if test="c_c != null and c_c != ''">
				AND BILL_ID = #{c_c}
			</if>
			<if test="c_q != null and c_q != ''">
				AND BILL_COUNT = #{c_q}
			</if>
			<if test="c_b != null and c_b != ''">
				AND PRICE = #{c_b}
			</if>
			<if test="c_a != null and c_a != ''">
				AND STATUS = #{c_a}
			</if>
			<if test="c_i != null and c_i != ''">
				AND VENDOR_ID = #{c_i}
			</if>
			<if test="c_n != null and c_n != ''">
				AND UPPER(MGR) LIKE '%' || UPPER(#{c_n}) || '%'
			</if>
			<if test="c_p != null and c_p != ''">
				AND VENDOR_PHONE = #{c_p}
			</if>
			<if test="c_j != null and c_j != ''">
				AND UPPER(EMAIL) LIKE '%' || UPPER(#{c_j}) || '%'
			</if>
		</where>
		ORDER BY VENDOR_NAME))
		WHERE RNUM <![CDATA[ >= ]]>
		${indexStart}
		AND RNUM <![CDATA[ <= ]]>
		${indexEnd}
	</select>

	<!-- 데이터 기입 -->

	<insert id="insertBill_1"
		parameterType="kr.or.GKBM.bill.BillDTO">

		INSERT INTO P_BILL
		VALUES(SEQ.NEXTVAL, #{c_q}, #{c_b},
		#{c_a}, #{c_i}, #{c_d})

	</insert>

	<delete id="deleteBill_1"
		parameterType="kr.or.GKBM.bill.BillDTO">

		DELETE FROM P_BILL
		WHERE BILL_ID IN
		<foreach item="delete" collection="check" open="(" close=")"
			separator=",">
			#{check}
		</foreach>

	</delete>

	<update id="updateBill_1"
		parameterType="kr.or.GKBM.bill.BillDTO">

		UPDATE P_BILL
		SET BILL_DATE = #{c_d},
		BILL_COUNT = #{c_q},
		PRICE = #{c_b},
		VENDOR_ID = #{c_i},
		STATUS = #{c_a}
		WHERE BILL._ID =
		#{c_c}

		UPDATE P_VENDOR
		SET VENDOR_NAME = #{c_n},
		MGR = #{c_m},
		VENDOR_PHONE = #{c_p},
		EMAIL = #{c_a},
		SKU_ID = #{c_i}
		WHERE VENDOR_ID =
		#{c_c}

	</update>

	<!-- Week 상품 조회 -->
	<select id="sku_select" resultType="kr.or.GKBM.week.WeekDTO">
		SELECT SKU_ID AS c_k
		FROM
		P_SKU
	</select>

	<!-- WEEK 전체 조회 -->
	<select id="selectWeekAll_1"
		resultType="kr.or.GKBM.week.WeekDTO">

		SELECT COUNT(*) AS line
		FROM P_WEEK_PLAN PW
		LEFT JOIN P_SKU
		PS ON PW.SKU_ID = PS.SKU_ID
	</select>

	<!-- 페이징 전체 조회 -->
	<select id="selectWeek_All_1"
		parameterType="kr.or.GKBM.week.WeekDTO"
		resultType="kr.or.GKBM.week.WeekDTO">

		SELECT RNUM, c_i, c_n, c_k, c_c, c_w, c_y
		FROM ( SELECT ROWNUM AS
		RNUM,
		c_i, c_n, c_k, c_c, c_w, c_y
		FROM ( SELECT PW.WEEK_PLAN_ID AS
		c_i,
		PS.SKU_NAME
		AS c_n, PS.SKU_ID AS c_k,
		PW.PLAN_COUNT AS c_c, PW.WEEK AS
		c_w,
		PW.PLAN_YEAR AS c_y
		FROM P_WEEK_PLAN PW
		LEFT JOIN P_SKU PS ON
		PW.SKU_ID = PS.SKU_ID
		ORDER BY PW.WEEK_PLAN_ID))
		WHERE RNUM <![CDATA[ >= ]]>
		${indexStart} AND RNUM <![CDATA[ <= ]]>
		${indexEnd}

	</select>

	<!-- WEEK 부분 조회 -->
	<select id="selectWeekPart_1"
		parameterType="kr.or.GKBM.week.WeekDTO"
		resultType="kr.or.GKBM.week.WeekDTO">
		SELECT COUNT(*) AS line
		FROM P_WEEK_PLAN PW
		LEFT JOIN P_SKU PS ON
		PW.SKU_ID = PS.SKU_ID
		<where>
			<if test="c_i != null and c_i != ''">
				AND WEEK_PLAN_ID = #{c_i}
			</if>
			<if test="c_n != null and c_n != ''">
				AND UPPER(SKU_NAME) LIKE '%' || UPPER(#{c_n}) || '%'
			</if>
			<if test="c_k != null and c_k != ''">
				AND UPPER(SKU_CODE) LIKE '%' || UPPER(#{c_k}) || '%'
			</if>
			<if test="c_c != null and c_c != ''">
				AND PLAN_COUNT = #{c_c}
			</if>
			<if test="c_w != null and c_w != ''">
				AND UPPER(WEEK) = #{c_w}
			</if>
			<if test="c_y != null and c_y != ''">
				AND PLAN_YEAR = #{c_y}
			</if>
		</where>

	</select>

	<!-- 페이징 부분 조회 -->
	<select id="selectWeek_Part_1"
		parameterType="kr.or.GKBM.week.WeekDTO"
		resultType="kr.or.GKBM.week.WeekDTO">
		SELECT RNUM, c_i, c_n, c_k, c_c, c_w, c_y
		FROM ( SELECT ROWNUM AS
		RNUM,
		c_i, c_n, c_k, c_c, c_w, c_y
		FROM ( SELECT PW.WEEK_PLAN_ID AS
		c_i,
		PS.SKU_NAME
		AS c_n, PS.SKU_CODE AS c_k,
		PW.PLAN_COUNT AS c_c, PW.WEEK AS
		c_w,
		PW.PLAN_YEAR AS c_y
		FROM P_WEEK_PLAN PW
		LEFT JOIN P_SKU PS ON
		PW.SKU_ID = PS.SKU_ID
		<where>
			<if test="c_i != null and c_i != ''">
				AND WEEK_PLAN_ID = #{c_i}
			</if>
			<if test="c_n != null and c_n != ''">
				AND UPPER(SKU_NAME) LIKE '%' || UPPER(#{c_n}) || '%'
			</if>
			<if test="c_k != null and c_k != ''">
				AND UPPER(SKU_CODE) LIKE '%' || UPPER(#{c_k}) || '%'
			</if>
			<if test="c_c != null and c_c != ''">
				AND PLAN_COUNT = #{c_c}
			</if>
			<if test="c_w != null and c_w != ''">
				AND UPPER(WEEK) = #{c_w}
			</if>
			<if test="c_y != null and c_y != ''">
				AND PLAN_YEAR = #{c_y}
			</if>
		</where>

		ORDER BY VENDOR_NAME))
		WHERE RNUM <![CDATA[ >= ]]>
		${indexStart}
		AND RNUM <![CDATA[ <= ]]>
		${indexEnd}
	</select>

	<insert id="insertWeek_1"
		parameterType="kr.or.GKBM.week.WeekDTO">

		INSERT INTO P_WEEK_PLAN
		VALUES(SEQ.NEXTVAL, #{c_y},
		#{c_w}, #{c_d}, #{c_k}, #{c_c})

	</insert>

	<delete id="deleteWeek_1"
		parameterType="kr.or.GKBM.week.WeekDTO">

		DELETE FROM P_WEEK_PLAN
		WHERE WEEK_PLAN_ID IN
		<foreach item="delete" collection="check" open="(" close=")"
			separator=",">
			#{delete}
		</foreach>

	</delete>

	<update id="updateWeek_1"
		parameterType="kr.or.GKBM.week.WeekDTO">

		UPDATE P_WEEK_PLAN
		SET WEEK_PLAN_ID = #{c_i},
		PLAN_YEAR =
		#{c_y},
		WEEK = #{c_w},
		PLAN_DATE = #{c_d},
		SKU_ID = #{c_k},
		PLAN_COUNT =
		#{c_c}
		WHERE WEEK_PLAN_ID = #{c_i}

	</update>

	<!-- Work 상품 조회 -->

	<select id="code_select" resultType="kr.or.GKBM.work.WorkDTO">
		SELECT PLAN_YEAR AS c_y,
		WEEK AS c_w
		FROM P_WEEK_PLAN
		GROUP BY PLAN_YEAR, WEEK
	</select>

	<select id="detail_select"
		parameterType="kr.or.GKBM.work.WorkDTO"
		resultType="kr.or.GKBM.work.WorkDTO">
		select pW.work_order_id as wi, pW.modify_date, pp.week_plan_id as
		c_pn,
		ps.sku_name as c_n, PS.SKU_CODE as c_c, pp.plan_count as c_cc,
		pW.quantity as q,
		PB.bom_id as c_b, pp.plan_year as c_y, pp.week as
		c_w, SPW.QSUM as c_s
		from P_WEEK_PLAN PP
		join P_SKU PS ON PP.SKU_ID =
		PS.SKU_ID
		left join
		P_BOM PB ON PS.SKU_ID = PB.SKU_ID
		left join
		P_WORK_ORDER PW ON
		PP.WEEK_PLAN_ID = PW.WEEK_PLAN_ID
		LEFT JOIN (SELECT
		SUM(QUANTITY) AS
		QSUM, WEEK_PLAN_ID FROM P_WORK_ORDER GROUP BY
		WEEK_PLAN_ID) SPW ON
		PP.WEEK_PLAN_ID = SPW.WEEK_PLAN_ID
		<where>
			<if test="c_y != null and c_y != ''">
				AND PP.plan_year = #{c_y}
			</if>
			<if test="c_w != null and c_w != ''">
				AND PP.WEEK = #{c_w}
			</if>
			<if test="c_n != null and c_n != ''">
				AND ps.sku_name = #{c_n}
			</if>
			<if test="c_pn != null and c_pn != ''">
				AND pp.week_plan_id = #{c_pn}
			</if>
		</where>
		GROUP BY
		pW.work_order_id,
		pW.modify_date,
		pp.week_plan_id,
		ps.sku_name,
		ps.sku_code,
		pp.plan_count,
		pW.quantity,
		pB.bom_id,
		pp.plan_year,
		pp.week,
		SPW.QSUM
	</select>

	<select id="select" parameterType="kr.or.GKBM.work.WorkDTO"
		resultType="kr.or.GKBM.work.WorkDTO">
		select pW.work_order_id as wi, pW.modify_date,
		pp.week_plan_id as c_pn,
		ps.sku_name as c_n, PS.SKU_CODE as c_c,
		pp.plan_count as c_cc, pW.quantity as q,
		PB.bom_id as c_b, pp.plan_year
		as c_y, pp.week as c_w, SPW.QSUM as
		c_s, PW.COMPL
		from P_WEEK_PLAN PP
		join P_SKU PS ON PP.SKU_ID = PS.SKU_ID
		left join P_BOM PB ON PS.SKU_ID
		= PB.SKU_ID
		left join P_WORK_ORDER PW
		ON PP.WEEK_PLAN_ID =
		PW.WEEK_PLAN_ID
		LEFT JOIN (SELECT SUM(QUANTITY) AS
		QSUM, WEEK_PLAN_ID
		FROM P_WORK_ORDER GROUP BY WEEK_PLAN_ID) SPW ON
		PP.WEEK_PLAN_ID =
		SPW.WEEK_PLAN_ID
		WHERE pW.work_order_id IS NOT NULL
		GROUP BY
		pW.work_order_id,
		pW.modify_date,
		pp.week_plan_id,
		ps.sku_name,
		ps.sku_code,
		pp.plan_count,
		pW.quantity,
		pB.bom_id,
		pp.plan_year,
		pp.week,
		SPW.QSUM,
		PW.COMPL
	</select>

	<insert id="insertWork" parameterType="kr.or.GKBM.work.WorkDTO">

		INSERT INTO P_WORK_ORDER
		(WORK_ORDER_ID, WEEK_PLAN_ID, MODIFY_DATE, QUANTITY, BOM_ID)
		VALUES(SEQ.NEXTVAL, #{c_pn}, SYSDATE, #{c_d}, #{c_b})

	</insert>

	<!-- Defect 삽입 -->

	<insert id="insertDefect"
		parameterType="kr.or.GKBM.defect.DefectDTO">

		INSERT INTO P_DEFECT
		VALUES(SYSDATE, #{un}, #{wi},
		SEQ.NEXTVAL)

	</insert>

	<!-- WORK ID 수정 -->

	<update id="defectUpdate"
		parameterType="kr.or.GKBM.defect.DefectDTO">

		UPDATE P_WORK_ORDER
		SET COMPL = 'Y'
		WHERE WORK_ORDER_ID =
		#{wi}

	</update>

	<!-- DISABLE 조회 -->

	<select id="disable"
		resultType="kr.or.GKBM.disposal_refurb.disableDTO">

		select pd.defect_id as id, ps.sku_code as code,
		ps.sku_name
		as name, ps.sku_category as type,
		pv.vendor_name as vendor,
		pd.defect_count as count
		from p_week_plan pw
		left join p_sku
		ps on
		pw.sku_id = ps.sku_id
		left join p_work_order pwo on
		pw.week_plan_id =
		pwo.week_plan_id
		left join p_defect pd on
		pwo.work_order_id =
		pd.work_order_id
		left join p_vendor pv on ps.sku_id
		= pv.sku_id

	</select>

	<!-- 이주희 -->
	<!--   상품정보관리 페이징된 목록   -->
<select id="fulltable_2" parameterType="skuDTO" resultType="skuDTO">
SELECT * FROM ( SELECT p.*, ROW_NUMBER() OVER (ORDER BY sku_id DESC) AS rn FROM p_sku p
<where>
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') )</if>
</where>
) WHERE rn BETWEEN #{startRow} AND #{endRow}
</select>
<!--   상품정보관리 조건에 맞는 전체 데이터 수 가져오기   -->
<select id="Count_2" parameterType="skuDTO" resultType="int">
SELECT COUNT(*) FROM p_sku
<where>
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') )</if>
</where>
</select>
<!--   상품정보관리 등록   -->
<insert id="addition_2" parameterType="skuDTO"> insert into p_sku VALUES (seq_p_sku.nextval, #{sku_code}, #{sku_name}, #{sku_size}, #{vendor_name}, #{price}, SYSDATE, #{modify_date}, #{sku_category}) </insert>
<!--   상품정보관리 삭제   -->
<delete id="delete_2" parameterType="skuDTO"> delete from p_sku where sku_id = #{sku_id} </delete>
<!--   상품정보관리 수정   -->
<update id="udpate_2" parameterType="skuDTO"> update p_sku set sku_code = #{sku_code}, sku_name = #{sku_name}, sku_size = #{sku_size}, vendor_name = #{vendor_name}, price = #{price}, modify_date = SYSDATE, sku_category = #{sku_category} where sku_id = #{sku_id} </update>
<!--   원자재입고관리   -->
<!--   원자재입고 페이징된 목록   -->
<select id="fulltable_2_1" parameterType="mioDTO" resultType="mioDTO">
SELECT * FROM ( SELECT pmio.*, ps.sku_code, ps.sku_name, ps.sku_size, ROW_NUMBER() OVER (ORDER BY pmio.ib_id DESC) AS rn FROM P_MATERIAL_IN_OUT pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
pmio.sku_type = 'In'
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
) WHERE rn BETWEEN #{startRow} AND #{endRow}
</select>
<!--   원자재입고관리 전체 데이터 수 조회   -->
<select id="Count_2_1" parameterType="mioDTO" resultType="int">
SELECT COUNT(*) FROM P_MATERIAL_IN_OUT pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
pmio.sku_type = 'In'
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
</select>
<!--   원자재입고관리 등록   -->
<insert id="addition_2_1" parameterType="mioDTO"> insert into p_material_in_out VALUES (seq_p_material_in_out.nextval, #{material_count}, #{material_price}, #{sku_type}, SYSDATE, #{modify_date}, #{remarks}, #{sku_id}, #{bill_id}) </insert>
<!--   원자재입고관리 삭제   -->
<delete id="delete_2_1" parameterType="mioDTO"> delete from p_material_in_out where ib_id = #{ib_id} </delete>
<!--   원자재입고관리 수정   -->
<update id="udpate_2_1" parameterType="mioDTO"> update p_material_in_out set material_count = #{material_count}, material_price = #{material_price}, sku_type = #{sku_type}, remarks = #{remarks}, modify_date = SYSDATE, sku_id = #{sku_id}, bill_id = #{bill_id} where ib_id = #{ib_id} </update>
<!--   원자재출고관리 페이징된 목록   -->
<select id="fulltable_2_2" parameterType="mioDTO2" resultType="mioDTO">
SELECT * FROM ( SELECT pmio.*, ps.sku_code, ps.sku_name, ps.sku_size, ROW_NUMBER() OVER (ORDER BY pmio.ib_id DESC) AS rn FROM P_MATERIAL_IN_OUT pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
pmio.sku_type = 'Out'
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
) WHERE rn BETWEEN #{startRow} AND #{endRow}
</select>
<!--   원자재출고관리 전체 데이터 수 조회   -->
<select id="Count_2_2" parameterType="mioDTO2" resultType="int">
SELECT COUNT(*) FROM P_MATERIAL_IN_OUT pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
pmio.sku_type = 'Out'
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
</select>
<!--   원자재출고관리 등록   -->
<insert id="addition_2_2" parameterType="mioDTO2"> insert into p_material_in_out VALUES (seq_p_material_in_out.nextval, #{material_count}, #{material_price}, #{sku_type}, SYSDATE, #{modify_date}, #{remarks}, #{sku_id}, #{bill_id}) </insert>
<!--   원자재출고관리 삭제   -->
<delete id="delete_2_2" parameterType="mioDTO2"> delete from p_material_in_out where ib_id = #{ib_id} </delete>
<!--   원자재출고관리 수정   -->
<update id="udpate_2_2" parameterType="mioDTO2"> update p_material_in_out set material_count = #{material_count}, material_price = #{material_price}, sku_type = #{sku_type}, remarks = #{remarks}, modify_date = SYSDATE, sku_id = #{sku_id}, bill_id = #{bill_id} where ib_id = #{ib_id} </update>
<!--   원자재현황 페이징된 목록   -->
<select id="fulltable_2_3" parameterType="mioDTO3" resultType="mioDTO">
SELECT * FROM ( SELECT pmio.*, ps.sku_code, ps.sku_name, ps.sku_size, ROW_NUMBER() OVER (ORDER BY pmio.ib_id DESC) AS rn FROM P_MATERIAL_IN_OUT pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
) WHERE rn BETWEEN #{startRow} AND #{endRow}
</select>
<!--   원자재현황 전체 데이터 수 조회   -->
<select id="Count_2_3" parameterType="mioDTO3" resultType="int">
SELECT COUNT(*) FROM P_MATERIAL_IN_OUT pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
</select>
<!--   완제품입고관리 페이징된 목록   -->
<select id="fulltable_2_4" parameterType="pioDTO" resultType="pioDTO">
SELECT * FROM ( SELECT pmio.*, ps.sku_code, ps.sku_name, ps.sku_size, ROW_NUMBER() OVER (ORDER BY pmio.ib_id DESC) AS rn FROM P_PRODUCT_IN_OUT pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
pmio.sku_type = 'In'
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
) WHERE rn BETWEEN #{startRow} AND #{endRow}
</select>
<!--   완제품입고관리 전체 데이터 수 조회   -->
<select id="Count_2_4" parameterType="pioDTO" resultType="int">
SELECT COUNT(*) FROM P_PRODUCT_IN_OUT pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
pmio.sku_type = 'In'
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
</select>
<!--   완제품입고관리 등록   -->
<insert id="addition_2_4" parameterType="pioDTO"> insert into P_PRODUCT_IN_OUT VALUES (SEQ_P_PRODUCT_IN_OUT.nextval, #{product_count}, #{product_price}, #{sku_type}, SYSDATE, #{modify_date}, #{remarks}, #{sku_id}, #{empno}) </insert>
<!--   완제품입고관리 삭제   -->
<delete id="delete_2_4" parameterType="pioDTO"> delete from P_PRODUCT_IN_OUT where ib_id = #{ib_id} </delete>
<!--   완제품입고관리 수정   -->
<update id="udpate_2_4" parameterType="pioDTO"> update P_PRODUCT_IN_OUT set product_count = #{product_count}, product_price = #{product_price}, sku_type = #{sku_type}, remarks = #{remarks}, modify_date = SYSDATE, sku_id = #{sku_id}, empno = #{empno} where ib_id = #{ib_id} </update>
<!--   완제품출고관리 페이징된 목록   -->
<select id="fulltable_2_5" parameterType="pioDTO2" resultType="pioDTO">
SELECT * FROM ( SELECT pmio.*, ps.sku_code, ps.sku_name, ps.sku_size, ROW_NUMBER() OVER (ORDER BY pmio.ib_id DESC) AS rn FROM P_PRODUCT_IN_OUT pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
pmio.sku_type = 'Out'
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
) WHERE rn BETWEEN #{startRow} AND #{endRow}
</select>
<!--   완제품출고관리 전체 데이터 수 조회   -->
<select id="Count_2_5" parameterType="pioDTO2" resultType="int">
SELECT COUNT(*) FROM P_PRODUCT_IN_OUT pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
pmio.sku_type = 'Out'
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
</select>
<!--   완제품출고관리 등록   -->
<insert id="addition_2_5" parameterType="pioDTO2"> insert into P_PRODUCT_IN_OUT VALUES (SEQ_P_PRODUCT_IN_OUT.nextval, #{product_count}, #{product_price}, #{sku_type}, SYSDATE, #{modify_date}, #{remarks}, #{sku_id}, #{empno}) </insert>
<!--   완제품출고관리 삭제   -->
<delete id="delete_2_5" parameterType="pioDTO2"> delete from P_PRODUCT_IN_OUT where ib_id = #{ib_id} </delete>
<!--   완제품출고관리 수정   -->
<update id="udpate_2_5" parameterType="pioDTO2"> update P_PRODUCT_IN_OUT set product_count = #{product_count}, product_price = #{product_price}, sku_type = #{sku_type}, remarks = #{remarks}, modify_date = SYSDATE, sku_id = #{sku_id}, empno = #{empno} where ib_id = #{ib_id} </update>
<!--   작업표준서 페이징된 목록   -->
<select id="fulltable_2_6" parameterType="wmDTO" resultType="wmDTO">
SELECT * FROM ( SELECT pmio.*, ps.sku_code, ps.sku_name, ps.sku_size, ROW_NUMBER() OVER (ORDER BY pmio.work_method DESC) AS rn FROM P_work_method pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
) WHERE rn BETWEEN #{startRow} AND #{endRow}
</select>
<!--   작업표준서 전체 데이터 수 조회   -->
<select id="Count_2_6" parameterType="wmDTO" resultType="int">
SELECT COUNT(*) FROM P_work_method pmio LEFT JOIN P_SKU ps ON pmio.sku_id = ps.sku_id
<where>
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
</select>
<!--   작업표준서 등록   -->
<insert id="addition_2_6" parameterType="wmDTO"> insert into P_work_method VALUES (seq_p_work_method.nextval, #{work}, #{consumption}, #{sku_id}, #{work_file}, SYSDATE, #{modify_date}) </insert>
<!--   작업표준서 삭제   -->
<delete id="delete_2_6" parameterType="wmDTO"> delete from P_work_method where work_method = #{work_method} </delete>
<!--   작업표준서 수정   -->
<update id="udpate_2_6" parameterType="wmDTO"> update P_work_method set work = #{work}, consumption = #{consumption}, sku_id = #{sku_id}, work_file = #{work_file}, modify_date = SYSDATE where work_method = #{work_method} </update>
<!--   BOM 페이징 목록   -->
<select id="fulltable_2_7" parameterType="bDTO" resultType="bDTO">
SELECT * FROM ( SELECT pb.*, ps.sku_code, ps.sku_name, ps.sku_size, pwm.work, pwm.work_file, ROW_NUMBER() OVER (ORDER BY pb.bom_id DESC) AS rn FROM p_bom pb LEFT JOIN p_sku ps ON pb.sku_id = ps.sku_id LEFT JOIN p_work_method pwm ON pb.work_method = pwm.work_method
<where>
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
) WHERE rn BETWEEN #{startRow} AND #{endRow}
</select>
<!--   BOM 데이터 수 조회   -->
<select id="Count_2_7" parameterType="bDTO" resultType="int">
SELECT COUNT(*) FROM p_bom pb LEFT JOIN p_sku ps ON pb.sku_id = ps.sku_id LEFT JOIN p_work_method pwm ON pb.work_method = pwm.work_method
<where>
<if test="searchKeyword != null and searchKeyword != ''"> AND ( UPPER(ps.sku_code) LIKE UPPER('%' || #{searchKeyword} || '%') OR UPPER(ps.sku_name) LIKE UPPER('%' || #{searchKeyword} || '%') ) </if>
</where>
</select>
<!--   bom 등록   -->
<insert id="addition_2_7" parameterType="bDTO"> insert into p_bom VALUES (seq_p_bom.nextval, #{sku_id_material}, #{consumption}, #{sku_id}, #{work_method}, SYSDATE, #{modify_date}) </insert>
<!--   bom 삭제   -->
<delete id="delete_2_7" parameterType="bDTO"> delete from p_bom where bom_id = #{bom_id} </delete>
<!--   bom 수정   -->
<update id="udpate_2_7" parameterType="bDTO"> update p_bom set sku_id_material = #{sku_id_material}, consumption = #{consumption}, sku_id = #{sku_id}, work_method = #{work_method}, modify_date = SYSDATE where bom_id = #{bom_id} </update>

	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 이준규 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->


	<!-- 로그인 정보 전체조회 -->

	<select id="selectEmp_3" resultType="kr.or.GKBM.Login.LoginDTO">
		select * from p_emp
	</select>

	<!-- 여기부터 설비 관련 쿼리문 -->

	<select id="selectAllFacilities"
		resultType="kr.or.GKBM.p_equipreg.P_equipregDTO" parameterType="map">
		SELECT
		* FROM p_facility
	</select>

	<!-- 설비등록 전체조회 and 검색 (페이징) -->
	<select id="selectP_equipreg"
		resultType="kr.or.GKBM.p_equipreg.P_equipregDTO" parameterType="map">
		SELECT * FROM (
		SELECT p.*, ROW_NUMBER() OVER (ORDER BY facility_code)
		AS rn
		FROM p_facility p
		<where>
			<!-- 공백 제거 및 대소문자 통일 -->
			(UPPER(facility_code) LIKE UPPER('%' || TRIM(#{facility_code}) ||
			'%')
			OR
			UPPER(facility_name) LIKE UPPER('%' || TRIM(#{facility_name})
			|| '%'))
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 전체 레코드 수 조회 -->
	<select id="selectTotalCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_facility
		<where>
			(UPPER(facility_code) LIKE UPPER('%' || TRIM(#{facility_code})
			|| '%')
			OR
			UPPER(facility_name) LIKE UPPER('%' ||
			TRIM(#{facility_name}) || '%'))
		</where>
	</select>


	<!-- 설비등록 DB에 추가 -->
	<insert id="insertP_eq"
		parameterType="kr.or.GKBM.p_equipreg.P_equipregDTO">
		insert into p_facility
		values
		(#{facility_code},
		#{facility_manager},
		#{installation_date},
		#{facility_name},
		#{facility_location},
		#{inspection_cycle},
		#{remarks})
	</insert>

	<!-- 설비등록페이지 내용삭제 -->
	<delete id="deleteP_eq3"
		parameterType="kr.or.GKBM.p_equipreg.P_equipregDTO">
		delete from p_facility
		where
		facility_code =
		#{facility_code}
	</delete>

	<select id="checkChildReferences" resultType="int">
		SELECT COUNT(*)
		FROM child_table
		WHERE facility_code = #{facilityCode}
	</select>


	<!-- 설비등록 수정 -->
	<update id="updateP_eq3"
		parameterType="kr.or.GKBM.p_equipreg.P_equipregDTO">
		update p_facility
		set
		facility_manager =
		#{facility_manager},
		installation_date = #{installation_date},
		facility_name = #{facility_name},
		facility_location =
		#{facility_location},
		inspection_cycle =
		#{inspection_cycle},
		remarks =
		#{remarks}
		where facility_code = #{facility_code}
	</update>


	<!-- 설비수리 전체조회 and 검색 (페이징) -->
	<select id="selectP_repair"
		resultType="kr.or.GKBM.p_repair.P_repairDTO" parameterType="map">
		SELECT * FROM (
		SELECT
		r.*,
		f.facility_name,  <!-- 설비명 추가 -->
		ROW_NUMBER() OVER (ORDER BY repair_id) AS rn
		FROM p_repair r
		JOIN
		p_facility f ON r.facility_code = f.facility_code
		<where>
			(UPPER(r.facility_code) LIKE UPPER('%' ||
			TRIM(#{facility_code}) || '%')
			OR
			UPPER(r.repair_details) LIKE
			UPPER('%' || TRIM(#{repair_details}) || '%'))
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>


	<!-- 전체 레코드 수 조회 -->
	<select id="selectRepairTotalCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_repair r
		JOIN p_facility f ON r.facility_code =
		f.facility_code
		<where>
			(UPPER(r.facility_code) LIKE UPPER('%' ||
			TRIM(#{facility_code}) || '%')
			OR
			UPPER(r.repair_details) LIKE
			UPPER('%' || TRIM(#{repair_details}) || '%'))
		</where>
	</select>


	<!-- 설비수리 DB에 추가 -->
	<insert id="insertP_repair"
		parameterType="kr.or.GKBM.p_repair.P_repairDTO">
		INSERT INTO p_repair
		VALUES
		(
		p_repair_seq.NEXTVAL,
		#{facility_code},
		#{repair_request_date},
		#{repair_details},
		#{repair_requester},
		#{repair_item},
		#{remarks}
		)
	</insert>

	<!-- 설비수리 내용삭제 -->
	<delete id="deleteP_repair"
		parameterType="kr.or.GKBM.p_repair.P_repairDTO">
		DELETE FROM p_repair
		WHERE repair_id = #{repair_id}
	</delete>

	<!-- 설비코드 참조 확인 (삭제 전 확인용) -->
	<select id="checkFacilityExists" resultType="int">
		SELECT COUNT(*)
		FROM
		p_facility
		WHERE facility_code = #{facility_code}
	</select>

	<!-- 설비수리 수정 -->
	<update id="updateP_repair"
		parameterType="kr.or.GKBM.p_repair.P_repairDTO">
		UPDATE p_repair
		SET
		facility_code = #{facility_code},
		repair_request_date = #{repair_request_date},
		repair_details =
		#{repair_details},
		repair_requester = #{repair_requester},
		repair_item =
		#{repair_item},
		remarks = #{remarks}
		WHERE repair_id = #{repair_id}
	</update>

	<!-- 설비점검 전체조회 and 검색 (페이징) -->
	<select id="selectP_ins" resultType="kr.or.GKBM.p_ins.P_insDTO"
		parameterType="map">
		SELECT * FROM (
		SELECT
		i.*,
		f.facility_name, <!-- 설비명 추가 -->
		ROW_NUMBER() OVER (ORDER BY i.inspection_id) AS rn
		FROM p_inspection i
		JOIN
		p_facility f ON i.facility_code = f.facility_code
		<where>
			(UPPER(i.facility_code) LIKE UPPER('%' ||
			TRIM(#{facility_code}) || '%')
			OR
			UPPER(i.inspection_content) LIKE
			UPPER('%' || TRIM(#{inspection_content}) || '%'))
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>


	<!-- 전체 레코드 수 조회 -->
	<select id="selectInsTotalCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_inspection i
		JOIN p_facility f ON i.facility_code
		= f.facility_code
		<where>
			(UPPER(i.facility_code) LIKE UPPER('%' ||
			TRIM(#{facility_code}) || '%')
			OR
			UPPER(i.inspection_content) LIKE
			UPPER('%' || TRIM(#{inspection_content}) || '%'))
		</where>
	</select>

	<!-- 설비점검 DB 추가 -->
	<insert id="insertP_ins"
		parameterType="kr.or.GKBM.p_ins.P_insDTO">
		INSERT INTO p_inspection
		VALUES
		(
		p_inspection_seq.NEXTVAL,
		#{facility_code},
		#{inspection_date},
		#{inspector},
		#{inspection_item},
		#{inspection_content},
		#{remarks}
		)
	</insert>

	<!-- 설비점검 삭제 -->
	<delete id="deleteP_ins"
		parameterType="kr.or.GKBM.p_ins.P_insDTO">
		DELETE FROM p_inspection WHERE inspection_id =
		#{inspection_id}
	</delete>

	<!-- 설비점검 수정 -->
	<update id="updateP_ins"
		parameterType="kr.or.GKBM.p_ins.P_insDTO">
		UPDATE p_inspection SET
		facility_code = #{facility_code},
		inspection_date = #{inspection_date},
		inspector = #{inspector},
		inspection_item = #{inspection_item},
		inspection_content =
		#{inspection_content},
		remarks = #{remarks}
		WHERE inspection_id =
		#{inspection_id}
	</update>



	<!-- 여기부터 소모품 관련 쿼리문 -->

	<select id="selectAllConsumreg"
		resultType="kr.or.GKBM.p_CMB.P_consumregDTO" parameterType="map">
		SELECT
		*
		FROM p_consumable
	</select>

	<!-- 소모품관리 전체조회 및 검색 (페이징) -->
	<select id="selectP_consumreg"
		resultType="kr.or.GKBM.p_CMB.P_consumregDTO" parameterType="map">
		SELECT * FROM (
		SELECT c.*, ROW_NUMBER() OVER (ORDER BY
		consumables_code) AS rn
		FROM p_consumable c
		<where>
			(UPPER(consumables_code) LIKE UPPER('%' ||
			TRIM(#{consumables_code}) || '%')
			OR
			UPPER(consumables_name) LIKE
			UPPER('%' || TRIM(#{consumables_name}) || '%'))
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 전체 레코드 수 조회 -->
	<select id="selectTotalCountConsum" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_consumable
		<where>
			(UPPER(consumables_code) LIKE UPPER('%' ||
			TRIM(#{consumables_code}) || '%')
			OR
			UPPER(consumables_name) LIKE
			UPPER('%' || TRIM(#{consumables_name}) || '%'))
		</where>
	</select>

	<!-- 등록 -->
	<insert id="insertP_con"
		parameterType="kr.or.GKBM.p_CMB.P_consumregDTO">
		INSERT INTO p_consumable
		VALUES (
		#{consumables_code},
		#{consumables_name},
		#{create_date},
		#{p_Con_count},
		#{manager},
		#{remarks}
		)
	</insert>

	<!-- 삭제 -->
	<delete id="deleteP_con"
		parameterType="kr.or.GKBM.p_CMB.P_consumregDTO">
		DELETE FROM p_consumable
		WHERE consumables_code =
		#{consumables_code}
	</delete>

	<!-- 수정 -->
	<update id="updateP_con"
		parameterType="kr.or.GKBM.p_CMB.P_consumregDTO">
		UPDATE p_consumable
		SET
		consumables_name =
		#{consumables_name},
		create_date = #{create_date},
		p_Con_count =
		#{p_Con_count},
		manager = #{manager},
		remarks = #{remarks}
		WHERE
		consumables_code =
		#{consumables_code}
	</update>


	<!-- 소모품 폐기 전체조회 및 검색 (페이징) -->
	<select id="selectP_disposal"
		resultType="kr.or.GKBM.p_CPG.P_disposalDTO" parameterType="map">
		SELECT * FROM (
		SELECT
		d.*,
		c.consumables_name,
		ROW_NUMBER() OVER (ORDER
		BY d.disposal_date DESC) AS rn
		FROM p_disposal d
		JOIN p_consumable c ON
		d.consumables_code = c.consumables_code
		<where>
			(UPPER(d.disposal_id) LIKE UPPER('%' || TRIM(#{searchKeyword})
			|| '%')
			OR UPPER(d.consumables_code) LIKE UPPER('%' ||
			TRIM(#{searchKeyword})
			|| '%')
			OR UPPER(c.consumables_name) LIKE
			UPPER('%' || TRIM(#{searchKeyword})
			|| '%'))
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 소모품 폐기 전체 레코드 수 조회 -->
	<select id="selectDisposalTotalCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_disposal d
		JOIN p_consumable c ON
		d.consumables_code = c.consumables_code
		<where>
			(UPPER(d.disposal_id) LIKE UPPER('%' || TRIM(#{searchKeyword})
			|| '%')
			OR UPPER(d.consumables_code) LIKE UPPER('%' ||
			TRIM(#{searchKeyword})
			|| '%')
			OR UPPER(c.consumables_name) LIKE
			UPPER('%' || TRIM(#{searchKeyword})
			|| '%'))
		</where>
	</select>

	<!-- 소모품 폐기 등록 -->
	<insert id="insertP_disposal"
		parameterType="kr.or.GKBM.p_CPG.P_disposalDTO">
		INSERT INTO p_disposal
		VALUES (
		p_disposal_seq.NEXTVAL,  <!-- 시퀀스 사용 -->
		#{consumables_code},
		#{manager},
		#{count},
		#{disposal_reason},
		#{disposal_date},
		#{remarks}
		)
	</insert>

	<!-- 소모품 수량 차감 -->
	<update id="decreaseConsumable"
		parameterType="kr.or.GKBM.p_CPG.P_disposalDTO">
		UPDATE p_consumable
		SET p_Con_count = p_Con_count -
		#{count}
		WHERE consumables_code = #{consumables_code}
	</update>


	<!-- 소모품 폐기 수량 조회 -->
	<select id="selectOriginalDisposalCount" resultType="int">
		SELECT count
		FROM p_disposal
		WHERE disposal_id = #{disposal_id}
	</select>


	<!-- 소모품 수량 증감/차감 -->
	<update id="adjustConsumable" parameterType="map">
		UPDATE p_consumable
		SET p_Con_count = p_Con_count + #{adjustment}
		WHERE consumables_code =
		#{consumables_code}
	</update>

	<!-- 소모품 폐기 수정 -->
	<update id="updateP_disposal"
		parameterType="kr.or.GKBM.p_CPG.P_disposalDTO">
		UPDATE p_disposal
		SET
		consumables_code =
		#{consumables_code},
		count = #{count},
		disposal_reason =
		#{disposal_reason},
		disposal_date = #{disposal_date},
		manager =
		#{manager},
		remarks = #{remarks}
		WHERE disposal_id = #{disposal_id}
	</update>

	<!-- 소모품 폐기 삭제 -->
	<delete id="deleteP_disposal"
		parameterType="kr.or.GKBM.p_CPG.P_disposalDTO">
		DELETE FROM p_disposal
		WHERE disposal_id = #{disposal_id}
	</delete>

	<!-- 삭제 시 수량 복원 쿼리 -->
	<update id="restoreConsumableOnDelete"
		parameterType="kr.or.GKBM.p_CPG.P_disposalDTO">
		UPDATE p_consumable
		SET p_Con_count = p_Con_count +
		#{count}
		WHERE consumables_code = #{consumables_code}
	</update>



	<!-- 수불 목록 조회 -->
	<select id="selectCsbList"
		resultType="kr.or.GKBM.p_CSB.P_csbDTO" parameterType="map">
		SELECT * FROM (
		SELECT
		log.*,
		c.consumables_name,
		ROW_NUMBER() OVER (ORDER
		BY log.receipt_payment_date DESC) AS rn
		FROM p_inventory_log log
		JOIN
		p_consumable c ON log.consumables_code = c.consumables_code
		<where>
			<if test="searchKeyword != null and searchKeyword != ''">
				UPPER(c.consumables_name) LIKE UPPER('%' ||
				#{searchKeyword} || '%')
				OR UPPER(log.consumables_code) LIKE
				UPPER('%' || #{searchKeyword} ||
				'%')
			</if>
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 전체 레코드 수 -->
	<select id="selectCsbTotalCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_inventory_log log
		JOIN p_consumable c ON
		log.consumables_code = c.consumables_code
		<where>
			<if test="searchKeyword != null and searchKeyword != ''">
				UPPER(c.consumables_name) LIKE UPPER('%' ||
				#{searchKeyword} || '%')
				OR UPPER(log.consumables_code) LIKE
				UPPER('%' || #{searchKeyword} ||
				'%')
			</if>
		</where>
	</select>

	<!-- 수불 등록 -->
	<insert id="insertCsb" parameterType="kr.or.GKBM.p_CSB.P_csbDTO">
		INSERT INTO p_inventory_log
		(
		receipt_payment_id,
		consumables_code,
		requester,
		importer,
		log_count,
		receipt_payment_date,
		remarks
		) VALUES (
		p_inventory_log_seq.NEXTVAL,
		#{consumables_code},
		#{requester},
		#{importer},
		#{log_count},
		#{receipt_payment_date},
		#{remarks}
		)
	</insert>

	<!-- 수불 수량 조회 -->
	<select id="selectOriginalCsbCount" resultType="int">
		SELECT log_count
		FROM p_inventory_log
		WHERE receipt_payment_id = #{receipt_payment_id}
	</select>


	<!-- 수불 수정 -->
	<update id="updateCsb" parameterType="kr.or.GKBM.p_CSB.P_csbDTO">
		UPDATE p_inventory_log SET
		consumables_code = #{consumables_code},
		requester = #{requester},
		importer = #{importer},
		log_count = #{log_count},
		receipt_payment_date =
		#{receipt_payment_date},
		remarks = #{remarks}
		WHERE receipt_payment_id =
		#{receipt_payment_id}
	</update>

	<!-- 소모품 폐기 삭제 -->
	<delete id="deleteP_CSB"
		parameterType="kr.or.GKBM.p_CSB.P_csbDTO">
		DELETE FROM p_inventory_log
		WHERE receipt_payment_id =
		#{receipt_payment_id}
	</delete>

	<!-- 삭제 시 수량 복원 쿼리 -->
	<update id="restoreP_CSB"
		parameterType="kr.or.GKBM.p_CSB.P_csbDTO">
		UPDATE p_consumable
		SET p_Con_count = p_Con_count +
		#{log_count}
		WHERE consumables_code = #{consumables_code}
	</update>

	<!-- 단건 조회 -->
	<select id="selectCsbById"
		resultType="kr.or.GKBM.p_CSB.P_csbDTO" parameterType="int">
		SELECT * FROM
		p_inventory_log
		WHERE receipt_payment_id = #{receipt_payment_id}
	</select>


	<!-- @@@@@@@@@@@@김도희@@@@@@@@@@@@@ -->

	<select id="getBoardDetail" resultType="boardDTO"
		parameterType="boardDTO">

		select * from p_board
		where board_id = #{board_id}
	</select>


	<update id="udpateBoard" parameterType="boardDTO">

		update p_board
		set title =
		#{title},
		board_content = #{board_content},
		notice =
		#{notice},
		reserve_date = sysdate
		where board_id = #{board_id}
	</update>


	<insert id="insertBoard" parameterType="boardDTO">
		<selectKey keyProperty="board_id" resultType="int"
			order="BEFORE">
			SELECT board_id_seq.NEXTVAL FROM dual
		</selectKey>

		insert into p_board
		(board_id, empno, title, board_content, notice,
		create_date,
		reserve_date, views)
		VALUES (
		#{board_id},
		#{empno},
		#{title},
		#{board_content},
		#{notice},
		sysdate, null, 0)
	</insert>


	<delete id="deleteBoard" parameterType="boardDTO">

		delete from p_board
		where
		board_id = #{board_id}
	</delete>


	<update id="viewsUpdateBoard" parameterType="boardDTO">

		update p_board
		set
		views = (
		select views+1 from p_board
		where board_id = #{board_id}
		)
		where board_id = #{board_id}
	</update>


	<select id="selectPageBoard" resultType="boardDTO">
		select *
		from (select rownum as rnum, inner_table.*
		from (select * from
		p_board
		order by board_id
		) inner_table
		)
	<![CDATA[
		where rnum >= #{indexStart} and rnum <= #{indexEnd}
	]]>
	</select>

	<select id="totalBoardPage" resultType="int">
		select count (*) from
		p_board
	</select>

	<select id="searchPageBoard" resultType="boardDTO"
		parameterType="boardDTO">
		select *
		from (select rownum as rnum, inner_table.*
		from (select * from
		p_board

		<where>
			<choose>
				<when
					test="type == 'empno' and  (keyword != '' and keyword != null)">
					and empno = #{empno}
				</when>
				<when
					test="type == 'title' and  (keyword != '' and keyword != null)">
					and title like '%' || #{title} || '%'
				</when>
				<when
					test="type == 'board_content' and  (keyword != '' and keyword != null)">
					and board_content like '%' || #{board_content} || '%'
				</when>
			</choose>

			<!-- 추후 String으로 수정 시, 해당 sql문 사용 and upper(empno) like upper('%' || #{ename} 
				|| '%') -->
		</where>
		order by board_id asc
		) inner_table
		)
	<![CDATA[
		where rnum >= #{indexStart} and rnum <= #{indexEnd}
	]]>
	</select>

	<insert id="uploadBoardFile" parameterType="boardFileDTO">
		insert into
		p_board_file
		(file_id, board_id, file_name, file_path, upload_date)
		values (
		board_file_seq.NEXTVAL,
		#{board_id},
		#{file_name},
		#{file_path},
		sysdate
		)
	</insert>


	<delete id="deleteFileByFileId" parameterType="boardFileDTO">
		delete from
		p_board_file
		where file_id = #{file_id}
	</delete>


	<select id="getFileById" parameterType="Integer"
		resultType="boardFileDTO">
		select *
		from p_board_file
		where board_id = #{board_id}
	</select>

	<insert id="insertCommentChild" parameterType="commentDTO">
		insert into p_comment
		(comment_id, empno, board_id, content, create_date,
		parent_id, depth, is_deleted)
		values(
		board_comment_seq.NEXTVAL,
		#{empno},
		#{board_id},
		#{content},
		sysdate,
		#{parent_id},
		#{depth},
		0)
	</insert>
	
		<insert id="insertCommentParent" parameterType="commentDTO">
		insert into p_comment
		(comment_id, empno, board_id, content, create_date,
		parent_id, depth, is_deleted)
		values(
		board_comment_seq.NEXTVAL,
		#{empno},
		#{board_id},
		#{content},
		sysdate,
		null ,
		#{depth},
		0)
	</insert>

	<update id="updateComment" parameterType="commentDTO">
		update p_comment set
		content = #{content}
		where comment_id = #{comment_id}
	</update>

	<update id="deleteComment" parameterType="commentDTO">
		update p_comment set
		is_deleted = 1
		where comment_id = #{comment_id}
	</update>

	<select id="checkCommentchildren" parameterType="commentDTO">
		select count(*)
		from p_comment
		where parent_id = #{comment_id}
	</select>

	 <select id="selectCommentList" parameterType="int" resultType="commentDTO">
		 WITH comment_recu (
		    lv, comment_id, empno, writer_name, content, create_date, depth, is_deleted
		  ) AS (
		    SELECT
		      0 AS lv,
		      c.comment_id,
		      c.empno,
		      e.emp_name AS writer_name,
		      c.content,
		      c.create_date,
		      c.depth,
		      c.is_deleted
		    FROM p_comment c
		    JOIN p_emp e ON c.empno = e.empno
		    WHERE c.depth = 0 AND c.board_id = #{value}
		
		    UNION ALL
		
		    SELECT
		      cr.lv + 1,
		      c.comment_id,
		      c.empno,
		      e.emp_name AS writer_name,
		      c.content,
		      c.create_date,
		      c.depth,
		      c.is_deleted
		    FROM comment_recu cr
		    LEFT OUTER JOIN p_comment c ON c.parent_id = cr.comment_id
		    LEFT OUTER JOIN p_emp e ON c.empno = e.empno
		    WHERE c.depth > 0 AND c.board_id = #{value}
		  )
		  SEARCH DEPTH FIRST BY comment_id ASC SET sort_comment
		  SELECT *
		  FROM comment_recu
		  ORDER BY sort_comment
    </select>
    
    <select id="selectProductionByUnit" resultType="productionDTO" parameterType="map">
        SELECT 
            <choose>
                <when test="unit == 'week'">
                    TO_CHAR(production_date, 'IYYY-IW')
                </when>
                <when test="unit == 'month'">
                    TO_CHAR(production_date, 'YYYY-MM')
                </when>
                <when test="unit == 'quarter'">
                    TO_CHAR(production_date, 'YYYY-Q')
                </when>
                <otherwise>
                    TO_CHAR(production_date, 'YYYY-MM')
                </otherwise>
            </choose> AS period,
            SUM(quantity) AS total_production
        FROM P_PRODUCTION
        GROUP BY 
            <choose>
                <when test="unit == 'week'">
                    TO_CHAR(production_date, 'IYYY-IW')
                </when>
                <when test="unit == 'month'">
                    TO_CHAR(production_date, 'YYYY-MM')
                </when>
                <when test="unit == 'quarter'">
                    TO_CHAR(production_date, 'YYYY-Q')
                </when>
                <otherwise>
                    TO_CHAR(production_date, 'YYYY-MM')
                </otherwise>
            </choose>
        ORDER BY period
    </select>
    
    
    <select id="selectProductionDetails" resultType="productionDTO">
		        SELECT 
			        p.production_id,
			        p.production_date,
			        p.unit,
			        p.quantity,
			
			        i.product_count,
			        i.product_price,
			        i.sku_type,
			        i.create_date,
			        i.sku_id,
			        s.sku_name,
			
			        (p.quantity * i.product_price) AS production_value
			
			    FROM p_production p
			    LEFT JOIN p_product_in_out i ON p.ib_id = i.ib_id
			    LEFT JOIN p_sku s ON i.sku_id = s.sku_id
			    WHERE i.sku_type = 'In' 
			    ORDER BY p.production_date DESC
			</select>
    
    <select id="selectAllFinancial" resultType="financialDTO">
        SELECT * FROM p_financial ORDER BY report_date DESC
    </select>

    <select id="selectFinancialByPeriod" resultType="financialDTO">
        SELECT * FROM p_financial
        WHERE report_date BETWEEN TO_DATE(#{startDate}, 'YYYY-MM-DD') AND TO_DATE(#{endDate}, 'YYYY-MM-DD')
        ORDER BY report_date
    </select>

	<select id="selectDefectRateByUnit" resultType="defectDTO"
		parameterType="map">
		SELECT
		period AS defect_date,
		ROUND(NVL(defect_count, 0) / NULLIF(NVL(production_count, 0), 0) * 100, 2) AS defect_rate
		FROM (
		SELECT
		<choose>
			<when test="unit == 'week'">
				TO_CHAR(d.defect_date, 'IYYY-IW')
			</when>
			<when test="unit == 'month'">
				TO_CHAR(d.defect_date, 'YYYY-MM')
			</when>
			<when test="unit == 'quarter'">
				TO_CHAR(d.defect_date, 'YYYY-Q')
			</when>
			<otherwise>
				TO_CHAR(d.defect_date, 'YYYY-MM')
			</otherwise>
		</choose>
		AS period,
		SUM(d.defect_count) AS defect_count,
		(
		SELECT SUM(p.quantity)
		FROM p_production p
		WHERE
		<choose>
			<when test="unit == 'week'">
				TO_CHAR(p.production_date, 'IYYY-IW') = TO_CHAR(d.defect_date, 'IYYY-IW')
			</when>
			<when test="unit == 'month'">
				TO_CHAR(p.production_date, 'YYYY-MM') = TO_CHAR(d.defect_date, 'YYYY-MM')
			</when>
			<when test="unit == 'quarter'">
				TO_CHAR(p.production_date, 'YYYY-Q') = TO_CHAR(d.defect_date, 'YYYY-Q')
			</when>
			<otherwise>
				TO_CHAR(p.production_date, 'YYYY-MM') = TO_CHAR(d.defect_date, 'YYYY-MM')
			</otherwise>
		</choose>
		) AS production_count
		FROM p_defect d
		GROUP BY
		<choose>
			<when test="unit == 'week'">
				TO_CHAR(d.defect_date, 'IYYY-IW')
			</when>
			<when test="unit == 'month'">
				TO_CHAR(d.defect_date, 'YYYY-MM')
			</when>
			<when test="unit == 'quarter'">
				TO_CHAR(d.defect_date, 'YYYY-Q')
			</when>
			<otherwise>
				TO_CHAR(d.defect_date, 'YYYY-MM')
			</otherwise>
		</choose>
		)
		ORDER BY period
	</select>
    
    
</mapper>