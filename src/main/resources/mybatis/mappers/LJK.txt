<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 이준규 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->


	<!-- 로그인 정보 전체조회 -->

	<select id="selectEmp_3" resultType="kr.or.GKBM.Login.LoginDTO">
		select * from p_emp
	</select>

	<!-- 여기부터 설비 관련 쿼리문 -->

	<select id="selectAllFacilities"
		resultType="kr.or.GKBM.p_equipreg.P_equipregDTO" parameterType="map">
		SELECT
		* FROM p_facility
	</select>

	<!-- 설비등록 전체조회 and 검색 (페이징) -->
	<select id="selectP_equipreg"
		resultType="kr.or.GKBM.p_equipreg.P_equipregDTO" parameterType="map">
		SELECT * FROM (
		SELECT p.*, ROW_NUMBER() OVER (ORDER BY facility_code)
		AS rn
		FROM p_facility p
		<where>
			<!-- 공백 제거 및 대소문자 통일 -->
			(UPPER(facility_code) LIKE UPPER('%' || TRIM(#{facility_code}) ||
			'%')
			OR
			UPPER(facility_name) LIKE UPPER('%' || TRIM(#{facility_name})
			|| '%'))
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 전체 레코드 수 조회 -->
	<select id="selectTotalCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_facility
		<where>
			(UPPER(facility_code) LIKE UPPER('%' || TRIM(#{facility_code})
			|| '%')
			OR
			UPPER(facility_name) LIKE UPPER('%' ||
			TRIM(#{facility_name}) || '%'))
		</where>
	</select>


	<!-- 설비등록 DB에 추가 -->
	<insert id="insertP_eq"
		parameterType="kr.or.GKBM.p_equipreg.P_equipregDTO">
		insert into p_facility
		values
		(#{facility_code},
		#{facility_manager},
		#{installation_date},
		#{facility_name},
		#{facility_location},
		#{inspection_cycle},
		#{remarks})
	</insert>

	<!-- 설비등록페이지 내용삭제 -->
	<delete id="deleteP_eq3"
		parameterType="kr.or.GKBM.p_equipreg.P_equipregDTO">
		delete from p_facility
		where
		facility_code =
		#{facility_code}
	</delete>

	<select id="checkChildReferences" resultType="int">
		SELECT COUNT(*)
		FROM child_table
		WHERE facility_code = #{facilityCode}
	</select>


	<!-- 설비등록 수정 -->
	<update id="updateP_eq3"
		parameterType="kr.or.GKBM.p_equipreg.P_equipregDTO">
		update p_facility
		set
		facility_manager =
		#{facility_manager},
		installation_date = #{installation_date},
		facility_name = #{facility_name},
		facility_location =
		#{facility_location},
		inspection_cycle =
		#{inspection_cycle},
		remarks =
		#{remarks}
		where facility_code = #{facility_code}
	</update>


	<!-- 설비수리 전체조회 and 검색 (페이징) -->
	<select id="selectP_repair"
		resultType="kr.or.GKBM.p_repair.P_repairDTO" parameterType="map">
		SELECT * FROM (
		SELECT
		r.*,
		f.facility_name,  <!-- 설비명 추가 -->
		ROW_NUMBER() OVER (ORDER BY repair_id) AS rn
		FROM p_repair r
		JOIN
		p_facility f ON r.facility_code = f.facility_code
		<where>
			(UPPER(r.facility_code) LIKE UPPER('%' ||
			TRIM(#{facility_code}) || '%')
			OR
			UPPER(r.repair_details) LIKE
			UPPER('%' || TRIM(#{repair_details}) || '%'))
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>


	<!-- 전체 레코드 수 조회 -->
	<select id="selectRepairTotalCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_repair r
		JOIN p_facility f ON r.facility_code =
		f.facility_code
		<where>
			(UPPER(r.facility_code) LIKE UPPER('%' ||
			TRIM(#{facility_code}) || '%')
			OR
			UPPER(r.repair_details) LIKE
			UPPER('%' || TRIM(#{repair_details}) || '%'))
		</where>
	</select>


	<!-- 설비수리 DB에 추가 -->
	<insert id="insertP_repair"
		parameterType="kr.or.GKBM.p_repair.P_repairDTO">
		INSERT INTO p_repair
		VALUES
		(
		p_repair_seq.NEXTVAL,
		#{facility_code},
		#{repair_request_date},
		#{repair_details},
		#{repair_requester},
		#{repair_item},
		#{remarks}
		)
	</insert>

	<!-- 설비수리 내용삭제 -->
	<delete id="deleteP_repair"
		parameterType="kr.or.GKBM.p_repair.P_repairDTO">
		DELETE FROM p_repair
		WHERE repair_id = #{repair_id}
	</delete>

	<!-- 설비코드 참조 확인 (삭제 전 확인용) -->
	<select id="checkFacilityExists" resultType="int">
		SELECT COUNT(*)
		FROM
		p_facility
		WHERE facility_code = #{facility_code}
	</select>

	<!-- 설비수리 수정 -->
	<update id="updateP_repair"
		parameterType="kr.or.GKBM.p_repair.P_repairDTO">
		UPDATE p_repair
		SET
		facility_code = #{facility_code},
		repair_request_date = #{repair_request_date},
		repair_details =
		#{repair_details},
		repair_requester = #{repair_requester},
		repair_item =
		#{repair_item},
		remarks = #{remarks}
		WHERE repair_id = #{repair_id}
	</update>

	<!-- 설비점검 전체조회 and 검색 (페이징) -->
	<select id="selectP_ins" resultType="kr.or.GKBM.p_ins.P_insDTO"
		parameterType="map">
		SELECT * FROM (
		SELECT
		i.*,
		f.facility_name, <!-- 설비명 추가 -->
		ROW_NUMBER() OVER (ORDER BY i.inspection_id) AS rn
		FROM p_inspection i
		JOIN
		p_facility f ON i.facility_code = f.facility_code
		<where>
			(UPPER(i.facility_code) LIKE UPPER('%' ||
			TRIM(#{facility_code}) || '%')
			OR
			UPPER(i.inspection_content) LIKE
			UPPER('%' || TRIM(#{inspection_content}) || '%'))
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>


	<!-- 전체 레코드 수 조회 -->
	<select id="selectInsTotalCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_inspection i
		JOIN p_facility f ON i.facility_code
		= f.facility_code
		<where>
			(UPPER(i.facility_code) LIKE UPPER('%' ||
			TRIM(#{facility_code}) || '%')
			OR
			UPPER(i.inspection_content) LIKE
			UPPER('%' || TRIM(#{inspection_content}) || '%'))
		</where>
	</select>

	<!-- 설비점검 DB 추가 -->
	<insert id="insertP_ins"
		parameterType="kr.or.GKBM.p_ins.P_insDTO">
		INSERT INTO p_inspection
		VALUES
		(
		p_inspection_seq.NEXTVAL,
		#{facility_code},
		#{inspection_date},
		#{inspector},
		#{inspection_item},
		#{inspection_content},
		#{remarks}
		)
	</insert>

	<!-- 설비점검 삭제 -->
	<delete id="deleteP_ins"
		parameterType="kr.or.GKBM.p_ins.P_insDTO">
		DELETE FROM p_inspection WHERE inspection_id =
		#{inspection_id}
	</delete>

	<!-- 설비점검 수정 -->
	<update id="updateP_ins"
		parameterType="kr.or.GKBM.p_ins.P_insDTO">
		UPDATE p_inspection SET
		facility_code = #{facility_code},
		inspection_date = #{inspection_date},
		inspector = #{inspector},
		inspection_item = #{inspection_item},
		inspection_content =
		#{inspection_content},
		remarks = #{remarks}
		WHERE inspection_id =
		#{inspection_id}
	</update>



	<!-- 여기부터 소모품 관련 쿼리문 -->

	<select id="selectAllConsumreg"
		resultType="kr.or.GKBM.p_CMB.P_consumregDTO" parameterType="map">
		SELECT
		*
		FROM p_consumable
	</select>

	<!-- 소모품관리 전체조회 및 검색 (페이징) -->
	<select id="selectP_consumreg"
		resultType="kr.or.GKBM.p_CMB.P_consumregDTO" parameterType="map">
		SELECT * FROM (
		SELECT c.*, ROW_NUMBER() OVER (ORDER BY
		consumables_code) AS rn
		FROM p_consumable c
		<where>
			(UPPER(consumables_code) LIKE UPPER('%' ||
			TRIM(#{consumables_code}) || '%')
			OR
			UPPER(consumables_name) LIKE
			UPPER('%' || TRIM(#{consumables_name}) || '%'))
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 전체 레코드 수 조회 -->
	<select id="selectTotalCountConsum" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_consumable
		<where>
			(UPPER(consumables_code) LIKE UPPER('%' ||
			TRIM(#{consumables_code}) || '%')
			OR
			UPPER(consumables_name) LIKE
			UPPER('%' || TRIM(#{consumables_name}) || '%'))
		</where>
	</select>

	<!-- 등록 -->
	<insert id="insertP_con"
		parameterType="kr.or.GKBM.p_CMB.P_consumregDTO">
		INSERT INTO p_consumable
		VALUES (
		#{consumables_code},
		#{consumables_name},
		#{create_date},
		#{p_Con_count},
		#{manager},
		#{remarks}
		)
	</insert>

	<!-- 삭제 -->
	<delete id="deleteP_con"
		parameterType="kr.or.GKBM.p_CMB.P_consumregDTO">
		DELETE FROM p_consumable
		WHERE consumables_code =
		#{consumables_code}
	</delete>

	<!-- 수정 -->
	<update id="updateP_con"
		parameterType="kr.or.GKBM.p_CMB.P_consumregDTO">
		UPDATE p_consumable
		SET
		consumables_name =
		#{consumables_name},
		create_date = #{create_date},
		p_Con_count =
		#{p_Con_count},
		manager = #{manager},
		remarks = #{remarks}
		WHERE
		consumables_code =
		#{consumables_code}
	</update>


	<!-- 소모품 폐기 전체조회 및 검색 (페이징) -->
	<select id="selectP_disposal"
		resultType="kr.or.GKBM.p_CPG.P_disposalDTO" parameterType="map">
		SELECT * FROM (
		SELECT
		d.*,
		c.consumables_name,
		ROW_NUMBER() OVER (ORDER
		BY d.disposal_date DESC) AS rn
		FROM p_disposal d
		JOIN p_consumable c ON
		d.consumables_code = c.consumables_code
		<where>
			(UPPER(d.disposal_id) LIKE UPPER('%' || TRIM(#{searchKeyword})
			|| '%')
			OR UPPER(d.consumables_code) LIKE UPPER('%' ||
			TRIM(#{searchKeyword})
			|| '%')
			OR UPPER(c.consumables_name) LIKE
			UPPER('%' || TRIM(#{searchKeyword})
			|| '%'))
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 소모품 폐기 전체 레코드 수 조회 -->
	<select id="selectDisposalTotalCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_disposal d
		JOIN p_consumable c ON
		d.consumables_code = c.consumables_code
		<where>
			(UPPER(d.disposal_id) LIKE UPPER('%' || TRIM(#{searchKeyword})
			|| '%')
			OR UPPER(d.consumables_code) LIKE UPPER('%' ||
			TRIM(#{searchKeyword})
			|| '%')
			OR UPPER(c.consumables_name) LIKE
			UPPER('%' || TRIM(#{searchKeyword})
			|| '%'))
		</where>
	</select>

	<!-- 소모품 폐기 등록 -->
	<insert id="insertP_disposal"
		parameterType="kr.or.GKBM.p_CPG.P_disposalDTO">
		INSERT INTO p_disposal
		VALUES (
		p_disposal_seq.NEXTVAL,  <!-- 시퀀스 사용 -->
		#{consumables_code},
		#{manager},
		#{count},
		#{disposal_reason},
		#{disposal_date},
		#{remarks}
		)
	</insert>

	<!-- 소모품 수량 차감 -->
	<update id="decreaseConsumable"
		parameterType="kr.or.GKBM.p_CPG.P_disposalDTO">
		UPDATE p_consumable
		SET p_Con_count = p_Con_count -
		#{count}
		WHERE consumables_code = #{consumables_code}
	</update>


	<!-- 소모품 폐기 수량 조회 -->
	<select id="selectOriginalDisposalCount" resultType="int">
		SELECT count
		FROM p_disposal
		WHERE disposal_id = #{disposal_id}
	</select>


	<!-- 소모품 수량 증감/차감 -->
	<update id="adjustConsumable" parameterType="map">
		UPDATE p_consumable
		SET p_Con_count = p_Con_count + #{adjustment}
		WHERE consumables_code =
		#{consumables_code}
	</update>

	<!-- 소모품 폐기 수정 -->
	<update id="updateP_disposal"
		parameterType="kr.or.GKBM.p_CPG.P_disposalDTO">
		UPDATE p_disposal
		SET
		consumables_code =
		#{consumables_code},
		count = #{count},
		disposal_reason =
		#{disposal_reason},
		disposal_date = #{disposal_date},
		manager =
		#{manager},
		remarks = #{remarks}
		WHERE disposal_id = #{disposal_id}
	</update>

	<!-- 소모품 폐기 삭제 -->
	<delete id="deleteP_disposal"
		parameterType="kr.or.GKBM.p_CPG.P_disposalDTO">
		DELETE FROM p_disposal
		WHERE disposal_id = #{disposal_id}
	</delete>

	<!-- 삭제 시 수량 복원 쿼리 -->
	<update id="restoreConsumableOnDelete"
		parameterType="kr.or.GKBM.p_CPG.P_disposalDTO">
		UPDATE p_consumable
		SET p_Con_count = p_Con_count +
		#{count}
		WHERE consumables_code = #{consumables_code}
	</update>



	<!-- 수불 목록 조회 -->
	<select id="selectCsbList"
		resultType="kr.or.GKBM.p_CSB.P_csbDTO" parameterType="map">
		SELECT * FROM (
		SELECT
		log.*,
		c.consumables_name,
		ROW_NUMBER() OVER (ORDER
		BY log.receipt_payment_date DESC) AS rn
		FROM p_inventory_log log
		JOIN
		p_consumable c ON log.consumables_code = c.consumables_code
		<where>
			<if test="searchKeyword != null and searchKeyword != ''">
				UPPER(c.consumables_name) LIKE UPPER('%' ||
				#{searchKeyword} || '%')
				OR UPPER(log.consumables_code) LIKE
				UPPER('%' || #{searchKeyword} ||
				'%')
			</if>
		</where>
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 전체 레코드 수 -->
	<select id="selectCsbTotalCount" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM p_inventory_log log
		JOIN p_consumable c ON
		log.consumables_code = c.consumables_code
		<where>
			<if test="searchKeyword != null and searchKeyword != ''">
				UPPER(c.consumables_name) LIKE UPPER('%' ||
				#{searchKeyword} || '%')
				OR UPPER(log.consumables_code) LIKE
				UPPER('%' || #{searchKeyword} ||
				'%')
			</if>
		</where>
	</select>

	<!-- 수불 등록 -->
	<insert id="insertCsb" parameterType="kr.or.GKBM.p_CSB.P_csbDTO">
		INSERT INTO p_inventory_log
		(
		receipt_payment_id,
		consumables_code,
		requester,
		importer,
		log_count,
		receipt_payment_date,
		remarks
		) VALUES (
		p_inventory_log_seq.NEXTVAL,
		#{consumables_code},
		#{requester},
		#{importer},
		#{log_count},
		#{receipt_payment_date},
		#{remarks}
		)
	</insert>

	<!-- 수불 수량 조회 -->
	<select id="selectOriginalCsbCount" resultType="int">
		SELECT log_count
		FROM p_inventory_log
		WHERE receipt_payment_id = #{receipt_payment_id}
	</select>


	<!-- 수불 수정 -->
	<update id="updateCsb" parameterType="kr.or.GKBM.p_CSB.P_csbDTO">
		UPDATE p_inventory_log SET
		consumables_code = #{consumables_code},
		requester = #{requester},
		importer = #{importer},
		log_count = #{log_count},
		receipt_payment_date =
		#{receipt_payment_date},
		remarks = #{remarks}
		WHERE receipt_payment_id =
		#{receipt_payment_id}
	</update>

	<!-- 소모품 폐기 삭제 -->
	<delete id="deleteP_CSB"
		parameterType="kr.or.GKBM.p_CSB.P_csbDTO">
		DELETE FROM p_inventory_log
		WHERE receipt_payment_id = #{receipt_payment_id}
	</delete>

	<!-- 삭제 시 수량 복원 쿼리 -->
	<update id="restoreP_CSB"
		parameterType="kr.or.GKBM.p_CSB.P_csbDTO">
		UPDATE p_consumable
		SET p_Con_count = p_Con_count +
		#{log_count}
		WHERE consumables_code = #{consumables_code}
	</update>

	<!-- 단건 조회 -->
	<select id="selectCsbById"
		resultType="kr.or.GKBM.p_CSB.P_csbDTO" parameterType="int">
		SELECT * FROM
		p_inventory_log
		WHERE receipt_payment_id = #{receipt_payment_id}
	</select>